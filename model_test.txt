python centralized.py --test_acc=0.99 --model=cnn --dataset=cifar --gpu=1 --iid=1 --local_ep=5 --local_bs=8 --num_users=30 --lr=0.01 
CNNCifar(
  (conv1): Conv2d(3, 32, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
  (conv2): Conv2d(32, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
  (fc1): Linear(in_features=2304, out_features=512, bias=True)
  (fc2): Linear(in_features=512, out_features=128, bias=True)
  (fc3): Linear(in_features=128, out_features=10, bias=True)
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
)
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Conv2d-1           [-1, 32, 24, 24]           2,432
         MaxPool2d-2           [-1, 32, 12, 12]               0
            Conv2d-3           [-1, 64, 12, 12]          51,264
         MaxPool2d-4             [-1, 64, 6, 6]               0
            Linear-5                  [-1, 512]       1,180,160
            Linear-6                  [-1, 128]          65,664
            Linear-7                   [-1, 10]           1,290
================================================================
Total params: 1,300,810
Trainable params: 1,300,810
Non-trainable params: 0
----------------------------------------------------------------
Input size (MB): 0.01
Forward/backward pass size (MB): 0.27
Params size (MB): 4.96
Estimated Total Size (MB): 5.24
----------------------------------------------------------------

python centralized.py --test_acc=0.99 --model=cnn --dataset=cifar --gpu=1 --iid=1 --local_ep=5 --local_bs=50 --num_users=30 --lr=0.01
CNNCifar(
  (conv1): Conv2d(3, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
  (conv2): Conv2d(64, 128, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2))
  (fc1): Linear(in_features=4608, out_features=256, bias=True)
  (fc2): Linear(in_features=256, out_features=128, bias=True)
  (fc3): Linear(in_features=128, out_features=10, bias=True)
  (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
)
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Conv2d-1           [-1, 64, 24, 24]           4,864
         MaxPool2d-2           [-1, 64, 12, 12]               0
            Conv2d-3          [-1, 128, 12, 12]         204,928
         MaxPool2d-4            [-1, 128, 6, 6]               0
            Linear-5                  [-1, 256]       1,179,904
            Linear-6                  [-1, 128]          32,896
            Linear-7                   [-1, 10]           1,290
================================================================
Total params: 1,423,882
Trainable params: 1,423,882
Non-trainable params: 0
----------------------------------------------------------------
Input size (MB): 0.01
Forward/backward pass size (MB): 0.53
Params size (MB): 5.43
Estimated Total Size (MB): 5.97
----------------------------------------------------------------


class CNNCifar(nn.Module):
    def __init__(self, args):
        super(CNNCifar, self).__init__()
        
        self.conv1 = nn.Conv2d(3, 32, kernel_size=5, padding=2)
        self.conv2 = nn.Conv2d(32, 64, kernel_size=5, padding=2)
        self.fc1 = nn.Linear(64 * 6 * 6, 512)
        self.fc2 = nn.Linear(512, 128)
        self.fc3 = nn.Linear(128, args.num_classes)
        self.pool = nn.MaxPool2d(2,2)
        self.conv_drop = nn.Dropout2d()
        self.device = 'cuda:0' if args.gpu else 'cpu'

    def forward(self, x):
        x = x.to(self.device)
        x = self.pool(F.relu(self.conv1(x)))
        x = self.pool(F.relu(self.conv_drop(self.conv2(x))))
        x = x.view(-1, 64 * 6 * 6)
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        x = self.fc3(x)
        return F.log_softmax(x, dim=1)

python centralized.py --test_acc=0.99 --model=cnn --dataset=cifar --gpu=1 --iid=1 --local_ep=5 --local_bs=8 --num_users=30 --lr=0.01 

class CNNCifar(nn.Module):
    def __init__(self, args):
        super(CNNCifar, self).__init__()
        self.conv1 = nn.Conv2d(3, 64, kernel_size=5, padding=2)
        self.conv2 = nn.Conv2d(64, 128, kernel_size=5, padding=2)
        self.fc1 = nn.Linear(128 * 6 * 6, 256)
        self.fc2 = nn.Linear(256, 128)
        self.fc3 = nn.Linear(128, args.num_classes)
        self.pool = nn.MaxPool2d(kernel_size=2, stride=2)
        # self.conv_drop = nn.Dropout2d()
        self.device = 'cuda:0' if args.gpu else 'cpu'

    def forward(self, x):
        x = self.pool(F.relu(self.conv1(x)))
        x = self.pool(F.relu(self.conv2(x))) # self.pool(F.relu(self.conv_drop(self.conv2(x))))
        x = x.view(-1, 128 * 6 * 6)
        x = F.relu(self.fc1(x))
        x = F.relu(self.fc2(x))
        x = self.fc3(x)
        return F.log_softmax(x, dim=1)

